#!/usr/bin/env node

const package = require("../package.json");
const Jaysonic = require("..");
const program = require("commander");
const fs = require("fs");

program
  .version(package.version)
  .option(
    "-c, --client-type <string>",
    "Type of client (tcp, ws, http)",
    "tcp",
    String
  )
  .option("-m, --method <string>", "Method name for request", String)
  .option("-s, --subscribe <string>", "Method name to subscribe to", String)
  .option("-n, --notify <string>", "Method name for notification", String)
  .option(
    "--params <object>",
    "Array or object to use as parameters",
    JSON.parse
  )
  .option("-i, --host <string>", "Host IP of the server", "127.0.0.1", String)
  .option("-p, --port <number>", "Port to connect to", Number)
  .option("-u, --path <string>", "Path for ws or http client", "/", String)
  .option(
    "-d, --delimiter <string>",
    "Delimiter to use for the request. For example: Use $'\\n' as cli syntax for escape characters.",
    "\n"
  )
  .option("-t, --timeout <number>", "Response timeout in seconds", 30, Number)
  .option(
    "--connection-timeout <number>",
    "Connection timeout in milliseconds",
    5000,
    Number
  )
  .option(
    "-r, --retries <number>",
    "Number of connection retry attempts",
    2,
    Number
  )
  .option(
    "-v, --jsonrpc-version <type>",
    "JSON-RPC version (1 or '2.0')",
    "2.0"
  )
  .option("-w, --write <string>", "Write output to file", String)
  .parse(process.argv);

const getClient = () => {
  const programOptions = {
    host: program.host,
    port: program.port,
    path: program.path,
    delimiter: program.delimiter,
    timeout: program.timeout,
    connectionTimeout: program.connectionTimeout,
    retries: program.retries,
    version: program.jsonrpcVersion
  };
  let client;
  if (program.clientType === "ws") {
    const options = {
      url: `ws://${program.host}:${program.port}${program.path}`
    };
    client = new Jaysonic.client.ws({
      ...programOptions,
      ...options
    });
  } else if (program.clientType === "http") {
    const options = {
      host: program.host,
      port: program.port,
      path: program.path
    };
    client = new Jaysonic.client.http({
      ...programOptions,
      ...options
    });
  } else if (program.clientType === "tcp") {
    const options = { host: program.host, port: program.port };
    client = new Jaysonic.client.tcp({
      ...programOptions,
      ...options
    });
  }
  return client;
};

const client = getClient();

if (!program.subscribe) {
  client
    .connect()
    .then(() => {
      if (program.method) {
        sendClientRequest();
      } else if (program.notify) {
        sendClientNotification();
      } else {
        console.error("No method or notification provided");
        process.exit(-1);
      }
    })
    .catch((error) => {
      console.error(error);
      process.exit(error.error.code);
    });
} else {
  if (program.clientType === "http") {
    console.error("HTTP client does not support subscriptions");
    process.exit(-1);
  }
  client
    .connect()
    .then(() => {
      client.subscribe(program.subscribe, (result) => {
        if (program.write) {
          fs.appendFileSync(program.write, JSON.stringify(result) + "\n");
        } else {
          console.log(result);
        }
      });
    })
    .catch((error) => {
      console.error(error);
      process.exit(error.error.code);
    });
}

const sendClientRequest = () => {
  client
    .request()
    .send(program.method, program.params)
    .then((result) => {
      if (program.write) {
        fs.writeFileSync(program.write, JSON.stringify(result));
      } else {
        console.log(result);
      }
      process.exit(0);
    })
    .catch((error) => {
      if (program.write) {
        fs.writeFileSync(program.write, JSON.stringify(error));
      } else {
        console.error(error);
      }
      process.exit(error.error.code);
    });
};

const sendClientNotification = () => {
  if (program.clientType === "http") {
    client
      .request()
      .notify(program.notify, program.params)
      .then((result) => {
        if (program.write) {
          fs.writeFileSync(program.write, JSON.stringify(result));
        } else {
          console.log(result);
        }
        process.exit(0);
      })
      .catch((error) => {
        if (program.write) {
          fs.writeFileSync(program.write, JSON.stringify(error));
        } else {
          console.error(error);
        }
        process.exit(error.error.code);
      });
  } else {
    client.request().notify(program.notify, program.params);
    process.exit(0);
  }
};
